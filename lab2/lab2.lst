
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800100  00800100  000003e8  2**0
                  ALLOC
  3 .stab         00000918  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ca1  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 32       	cpi	r26, 0x21	; 33
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  ac:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <dec_to_seven_seg>:
//************************************************************************
//				Decimal to Seven Seg
//Takes the four digits held in segment_data and encodes it to work 
//with the seven seg board. These encodings are stored in dec_to_seg.

void dec_to_seven_seg() {
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	ac e1       	ldi	r26, 0x1C	; 28
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e0 e1       	ldi	r30, 0x10	; 16
  c2:	f1 e0       	ldi	r31, 0x01	; 1
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
		else if(segment_data[i] == 0x06) {dec_to_seg[i] = 0x41;}
		else if(segment_data[i] == 0x07) {dec_to_seg[i] = 0x1F;}
		else if(segment_data[i] == 0x08) {dec_to_seg[i] = 0x01;}
		else if(segment_data[i] == 0x09) {dec_to_seg[i] = 0x19;}
		else {dec_to_seg[i] = 0xFF;} //disply nothing.
  c4:	cf ef       	ldi	r28, 0xFF	; 255
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
		else if(segment_data[i] == 0x06) {dec_to_seg[i] = 0x41;}
		else if(segment_data[i] == 0x07) {dec_to_seg[i] = 0x1F;}
		else if(segment_data[i] == 0x08) {dec_to_seg[i] = 0x01;}
		else if(segment_data[i] == 0x09) {dec_to_seg[i] = 0x19;}
  c6:	09 e1       	ldi	r16, 0x19	; 25
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
		else if(segment_data[i] == 0x06) {dec_to_seg[i] = 0x41;}
		else if(segment_data[i] == 0x07) {dec_to_seg[i] = 0x1F;}
		else if(segment_data[i] == 0x08) {dec_to_seg[i] = 0x01;}
  c8:	11 e0       	ldi	r17, 0x01	; 1
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
		else if(segment_data[i] == 0x06) {dec_to_seg[i] = 0x41;}
		else if(segment_data[i] == 0x07) {dec_to_seg[i] = 0x1F;}
  ca:	df e1       	ldi	r29, 0x1F	; 31
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
		else if(segment_data[i] == 0x06) {dec_to_seg[i] = 0x41;}
  cc:	71 e4       	ldi	r23, 0x41	; 65
		if(segment_data[i] == 0x00) {dec_to_seg[i] = 0x03;}
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
  ce:	69 e4       	ldi	r22, 0x49	; 73
	for(i = 0; i < 5; i++) {  //Loop through all of the five digits
		if(segment_data[i] == 0x00) {dec_to_seg[i] = 0x03;}
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
  d0:	59 e9       	ldi	r21, 0x99	; 153
	int i = 0;
	for(i = 0; i < 5; i++) {  //Loop through all of the five digits
		if(segment_data[i] == 0x00) {dec_to_seg[i] = 0x03;}
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
  d2:	4d e0       	ldi	r20, 0x0D	; 13
	// |segA|segB|segC|segD|segE|segF|segG|DP|
	int i = 0;
	for(i = 0; i < 5; i++) {  //Loop through all of the five digits
		if(segment_data[i] == 0x00) {dec_to_seg[i] = 0x03;}
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
  d4:	35 e2       	ldi	r19, 0x25	; 37
void dec_to_seven_seg() {
	// |segA|segB|segC|segD|segE|segF|segG|DP|
	int i = 0;
	for(i = 0; i < 5; i++) {  //Loop through all of the five digits
		if(segment_data[i] == 0x00) {dec_to_seg[i] = 0x03;}
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
  d6:	2f e9       	ldi	r18, 0x9F	; 159

void dec_to_seven_seg() {
	// |segA|segB|segC|segD|segE|segF|segG|DP|
	int i = 0;
	for(i = 0; i < 5; i++) {  //Loop through all of the five digits
		if(segment_data[i] == 0x00) {dec_to_seg[i] = 0x03;}
  d8:	93 e0       	ldi	r25, 0x03	; 3
  da:	8d 91       	ld	r24, X+
  dc:	81 11       	cpse	r24, r1
  de:	0b c0       	rjmp	.+22     	; 0xf6 <dec_to_seven_seg+0x42>
  e0:	90 83       	st	Z, r25
  e2:	31 96       	adiw	r30, 0x01	; 1
//with the seven seg board. These encodings are stored in dec_to_seg.

void dec_to_seven_seg() {
	// |segA|segB|segC|segD|segE|segF|segG|DP|
	int i = 0;
	for(i = 0; i < 5; i++) {  //Loop through all of the five digits
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	e5 31       	cpi	r30, 0x15	; 21
  e8:	f8 07       	cpc	r31, r24
  ea:	b9 f7       	brne	.-18     	; 0xda <dec_to_seven_seg+0x26>
		else if(segment_data[i] == 0x07) {dec_to_seg[i] = 0x1F;}
		else if(segment_data[i] == 0x08) {dec_to_seg[i] = 0x01;}
		else if(segment_data[i] == 0x09) {dec_to_seg[i] = 0x19;}
		else {dec_to_seg[i] = 0xFF;} //disply nothing.
	}//for 
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret
void dec_to_seven_seg() {
	// |segA|segB|segC|segD|segE|segF|segG|DP|
	int i = 0;
	for(i = 0; i < 5; i++) {  //Loop through all of the five digits
		if(segment_data[i] == 0x00) {dec_to_seg[i] = 0x03;}
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 f0       	breq	.+36     	; 0x11e <dec_to_seven_seg+0x6a>
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	91 f0       	breq	.+36     	; 0x122 <dec_to_seven_seg+0x6e>
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	91 f0       	breq	.+36     	; 0x126 <dec_to_seven_seg+0x72>
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	91 f0       	breq	.+36     	; 0x12a <dec_to_seven_seg+0x76>
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
 106:	85 30       	cpi	r24, 0x05	; 5
 108:	91 f0       	breq	.+36     	; 0x12e <dec_to_seven_seg+0x7a>
		else if(segment_data[i] == 0x06) {dec_to_seg[i] = 0x41;}
 10a:	86 30       	cpi	r24, 0x06	; 6
 10c:	a1 f0       	breq	.+40     	; 0x136 <dec_to_seven_seg+0x82>
		else if(segment_data[i] == 0x07) {dec_to_seg[i] = 0x1F;}
 10e:	87 30       	cpi	r24, 0x07	; 7
 110:	a1 f0       	breq	.+40     	; 0x13a <dec_to_seven_seg+0x86>
		else if(segment_data[i] == 0x08) {dec_to_seg[i] = 0x01;}
 112:	88 30       	cpi	r24, 0x08	; 8
 114:	71 f0       	breq	.+28     	; 0x132 <dec_to_seven_seg+0x7e>
		else if(segment_data[i] == 0x09) {dec_to_seg[i] = 0x19;}
 116:	89 30       	cpi	r24, 0x09	; 9
 118:	91 f0       	breq	.+36     	; 0x13e <dec_to_seven_seg+0x8a>
		else {dec_to_seg[i] = 0xFF;} //disply nothing.
 11a:	c0 83       	st	Z, r28
 11c:	e2 cf       	rjmp	.-60     	; 0xe2 <dec_to_seven_seg+0x2e>
void dec_to_seven_seg() {
	// |segA|segB|segC|segD|segE|segF|segG|DP|
	int i = 0;
	for(i = 0; i < 5; i++) {  //Loop through all of the five digits
		if(segment_data[i] == 0x00) {dec_to_seg[i] = 0x03;}
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
 11e:	20 83       	st	Z, r18
 120:	e0 cf       	rjmp	.-64     	; 0xe2 <dec_to_seven_seg+0x2e>
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
 122:	30 83       	st	Z, r19
 124:	de cf       	rjmp	.-68     	; 0xe2 <dec_to_seven_seg+0x2e>
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
 126:	40 83       	st	Z, r20
 128:	dc cf       	rjmp	.-72     	; 0xe2 <dec_to_seven_seg+0x2e>
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
 12a:	50 83       	st	Z, r21
 12c:	da cf       	rjmp	.-76     	; 0xe2 <dec_to_seven_seg+0x2e>
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
 12e:	60 83       	st	Z, r22
 130:	d8 cf       	rjmp	.-80     	; 0xe2 <dec_to_seven_seg+0x2e>
		else if(segment_data[i] == 0x06) {dec_to_seg[i] = 0x41;}
		else if(segment_data[i] == 0x07) {dec_to_seg[i] = 0x1F;}
		else if(segment_data[i] == 0x08) {dec_to_seg[i] = 0x01;}
 132:	10 83       	st	Z, r17
 134:	d6 cf       	rjmp	.-84     	; 0xe2 <dec_to_seven_seg+0x2e>
		else if(segment_data[i] == 0x01) {dec_to_seg[i] = 0x9F;}
        	else if(segment_data[i] == 0x02) {dec_to_seg[i] = 0x25;}
		else if(segment_data[i] == 0x03) {dec_to_seg[i] = 0x0D;}
		else if(segment_data[i] == 0x04) {dec_to_seg[i] = 0x99;}
		else if(segment_data[i] == 0x05) {dec_to_seg[i] = 0x49;}
		else if(segment_data[i] == 0x06) {dec_to_seg[i] = 0x41;}
 136:	70 83       	st	Z, r23
 138:	d4 cf       	rjmp	.-88     	; 0xe2 <dec_to_seven_seg+0x2e>
		else if(segment_data[i] == 0x07) {dec_to_seg[i] = 0x1F;}
 13a:	d0 83       	st	Z, r29
 13c:	d2 cf       	rjmp	.-92     	; 0xe2 <dec_to_seven_seg+0x2e>
		else if(segment_data[i] == 0x08) {dec_to_seg[i] = 0x01;}
		else if(segment_data[i] == 0x09) {dec_to_seg[i] = 0x19;}
 13e:	00 83       	st	Z, r16
 140:	d0 cf       	rjmp	.-96     	; 0xe2 <dec_to_seven_seg+0x2e>

00000142 <chk_buttons>:
//debounced button push so a debounce and toggle function can be 
//implemented at the same time. Adapted to check buttons from Ganssel's 
//"Guide to Debouncing" Expects active low pushbuttons on PINA port.  
//Debounce time is determined by external loop delay times 12. 

uint8_t chk_buttons(uint8_t b) {
 142:	48 2f       	mov	r20, r24
	static uint16_t state[8]; //holds present state
  	state[b] = (state[b] << 1) | (! bit_is_clear(PINA, b)) | 0xE000;
 144:	e8 2f       	mov	r30, r24
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	99 b3       	in	r25, 0x19	; 25
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	e0 50       	subi	r30, 0x00	; 0
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	20 81       	ld	r18, Z
 154:	31 81       	ldd	r19, Z+1	; 0x01
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	30 6e       	ori	r19, 0xE0	; 224
 15c:	89 2f       	mov	r24, r25
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <chk_buttons+0x24>
 162:	95 95       	asr	r25
 164:	87 95       	ror	r24
 166:	4a 95       	dec	r20
 168:	e2 f7       	brpl	.-8      	; 0x162 <chk_buttons+0x20>
 16a:	81 70       	andi	r24, 0x01	; 1
 16c:	99 27       	eor	r25, r25
 16e:	28 2b       	or	r18, r24
 170:	39 2b       	or	r19, r25
 172:	31 83       	std	Z+1, r19	; 0x01
 174:	20 83       	st	Z, r18
  	if (state[b] == 0xF000) return 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	21 15       	cp	r18, r1
 17a:	30 4f       	sbci	r19, 0xF0	; 240
 17c:	09 f0       	breq	.+2      	; 0x180 <chk_buttons+0x3e>
 17e:	80 e0       	ldi	r24, 0x00	; 0
  	return 0;
}
 180:	08 95       	ret

00000182 <segsum>:
//                                   segsum                                   
//takes a 16-bit binary input value and places the appropriate equivalent
//4 digit BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|

void segsum(uint16_t sum) {
 182:	ac 01       	movw	r20, r24
  	//break up decimal sum into 4 digit-segments
  	segment_data[0] = sum%10;        //ones place
 184:	9c 01       	movw	r18, r24
 186:	ad ec       	ldi	r26, 0xCD	; 205
 188:	bc ec       	ldi	r27, 0xCC	; 204
 18a:	0e 94 99 01 	call	0x332	; 0x332 <__umulhisi3>
 18e:	fc 01       	movw	r30, r24
 190:	f6 95       	lsr	r31
 192:	e7 95       	ror	r30
 194:	f6 95       	lsr	r31
 196:	e7 95       	ror	r30
 198:	f6 95       	lsr	r31
 19a:	e7 95       	ror	r30
 19c:	9f 01       	movw	r18, r30
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	cf 01       	movw	r24, r30
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	82 0f       	add	r24, r18
 1b2:	93 1f       	adc	r25, r19
 1b4:	9a 01       	movw	r18, r20
 1b6:	28 1b       	sub	r18, r24
 1b8:	39 0b       	sbc	r19, r25
 1ba:	20 93 1c 01 	sts	0x011C, r18
  	segment_data[1] = (sum/10)%10;   //tens place
 1be:	9f 01       	movw	r18, r30
 1c0:	0e 94 99 01 	call	0x332	; 0x332 <__umulhisi3>
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	9c 01       	movw	r18, r24
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	82 0f       	add	r24, r18
 1e4:	93 1f       	adc	r25, r19
 1e6:	e8 1b       	sub	r30, r24
 1e8:	f9 0b       	sbc	r31, r25
 1ea:	e0 93 1d 01 	sts	0x011D, r30
  	segment_data[2] = 0xff;          //colon
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	80 93 1e 01 	sts	0x011E, r24
  	segment_data[3] = (sum/100)%10;  //hundreds place
 1f4:	9a 01       	movw	r18, r20
 1f6:	36 95       	lsr	r19
 1f8:	27 95       	ror	r18
 1fa:	36 95       	lsr	r19
 1fc:	27 95       	ror	r18
 1fe:	ab e7       	ldi	r26, 0x7B	; 123
 200:	b4 e1       	ldi	r27, 0x14	; 20
 202:	0e 94 99 01 	call	0x332	; 0x332 <__umulhisi3>
 206:	fc 01       	movw	r30, r24
 208:	f6 95       	lsr	r31
 20a:	e7 95       	ror	r30
 20c:	9f 01       	movw	r18, r30
 20e:	ad ec       	ldi	r26, 0xCD	; 205
 210:	bc ec       	ldi	r27, 0xCC	; 204
 212:	0e 94 99 01 	call	0x332	; 0x332 <__umulhisi3>
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	bc 01       	movw	r22, r24
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	68 0f       	add	r22, r24
 236:	79 1f       	adc	r23, r25
 238:	e6 1b       	sub	r30, r22
 23a:	f7 0b       	sbc	r31, r23
 23c:	e0 93 1f 01 	sts	0x011F, r30
  	segment_data[4] = (sum/1000)%10; //thousands place
 240:	9a 01       	movw	r18, r20
 242:	36 95       	lsr	r19
 244:	27 95       	ror	r18
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	a5 ec       	ldi	r26, 0xC5	; 197
 250:	b0 e2       	ldi	r27, 0x20	; 32
 252:	0e 94 99 01 	call	0x332	; 0x332 <__umulhisi3>
 256:	fc 01       	movw	r30, r24
 258:	f2 95       	swap	r31
 25a:	e2 95       	swap	r30
 25c:	ef 70       	andi	r30, 0x0F	; 15
 25e:	ef 27       	eor	r30, r31
 260:	ff 70       	andi	r31, 0x0F	; 15
 262:	ef 27       	eor	r30, r31
 264:	9f 01       	movw	r18, r30
 266:	ad ec       	ldi	r26, 0xCD	; 205
 268:	bc ec       	ldi	r27, 0xCC	; 204
 26a:	0e 94 99 01 	call	0x332	; 0x332 <__umulhisi3>
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	ac 01       	movw	r20, r24
 27c:	44 0f       	add	r20, r20
 27e:	55 1f       	adc	r21, r21
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	48 0f       	add	r20, r24
 28e:	59 1f       	adc	r21, r25
 290:	e4 1b       	sub	r30, r20
 292:	f5 0b       	sbc	r31, r21
 294:	9e 2f       	mov	r25, r30
 296:	e0 93 20 01 	sts	0x0120, r30
 29a:	e0 e2       	ldi	r30, 0x20	; 32
 29c:	f1 e0       	ldi	r31, 0x01	; 1
        
  	//blank out leading zero digits
  	int x = 4;
  	for (x = 4; x>0; x--) {
		//loop through until we find a nonzero val; make all 1
    		if(segment_data[x] == 0) {segment_data[x] = 0xFF;} 
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	91 11       	cpse	r25, r1
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <segsum+0x132>
 2a4:	80 83       	st	Z, r24
  	segment_data[3] = (sum/100)%10;  //hundreds place
  	segment_data[4] = (sum/1000)%10; //thousands place
        
  	//blank out leading zero digits
  	int x = 4;
  	for (x = 4; x>0; x--) {
 2a6:	31 e0       	ldi	r19, 0x01	; 1
 2a8:	ed 31       	cpi	r30, 0x1D	; 29
 2aa:	f3 07       	cpc	r31, r19
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <segsum+0x132>
 2ae:	92 91       	ld	r25, -Z
		//loop through until we find a nonzero val; make all 1
    		if(segment_data[x] == 0) {segment_data[x] = 0xFF;} 
 2b0:	99 23       	and	r25, r25
 2b2:	c1 f3       	breq	.-16     	; 0x2a4 <segsum+0x122>
 2b4:	08 95       	ret

000002b6 <main>:

int main()
{

	#ifdef DEBUG
	DDRB = 0x0F;
 2b6:	8f e0       	ldi	r24, 0x0F	; 15
 2b8:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x05;
 2ba:	85 e0       	ldi	r24, 0x05	; 5
 2bc:	88 bb       	out	0x18, r24	; 24
	DDRA = 0xFF;
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	8a bb       	out	0x1a, r24	; 26
	while(1) {
		PORTB = 0x00;
		PORTA = 0x00;
		_delay_ms(1000);
		PORTB = 0x01;
 2c2:	31 e0       	ldi	r19, 0x01	; 1
		_delay_ms(1000);
		PORTB = 0x02;
 2c4:	22 e0       	ldi	r18, 0x02	; 2
		_delay_ms(1000);
		PORTB = 0x03;
 2c6:	93 e0       	ldi	r25, 0x03	; 3
		_delay_ms(1000);
		PORTB = 0x04;
 2c8:	84 e0       	ldi	r24, 0x04	; 4
	#ifdef DEBUG
	DDRB = 0x0F;
	PORTB = 0x05;
	DDRA = 0xFF;
	while(1) {
		PORTB = 0x00;
 2ca:	18 ba       	out	0x18, r1	; 24
		PORTA = 0x00;
 2cc:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	4f ef       	ldi	r20, 0xFF	; 255
 2d0:	53 ed       	ldi	r21, 0xD3	; 211
 2d2:	60 e3       	ldi	r22, 0x30	; 48
 2d4:	41 50       	subi	r20, 0x01	; 1
 2d6:	50 40       	sbci	r21, 0x00	; 0
 2d8:	60 40       	sbci	r22, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x1e>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x28>
 2de:	00 00       	nop
		_delay_ms(1000);
		PORTB = 0x01;
 2e0:	38 bb       	out	0x18, r19	; 24
 2e2:	4f ef       	ldi	r20, 0xFF	; 255
 2e4:	53 ed       	ldi	r21, 0xD3	; 211
 2e6:	60 e3       	ldi	r22, 0x30	; 48
 2e8:	41 50       	subi	r20, 0x01	; 1
 2ea:	50 40       	sbci	r21, 0x00	; 0
 2ec:	60 40       	sbci	r22, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x32>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x3c>
 2f2:	00 00       	nop
		_delay_ms(1000);
		PORTB = 0x02;
 2f4:	28 bb       	out	0x18, r18	; 24
 2f6:	4f ef       	ldi	r20, 0xFF	; 255
 2f8:	53 ed       	ldi	r21, 0xD3	; 211
 2fa:	60 e3       	ldi	r22, 0x30	; 48
 2fc:	41 50       	subi	r20, 0x01	; 1
 2fe:	50 40       	sbci	r21, 0x00	; 0
 300:	60 40       	sbci	r22, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x46>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x50>
 306:	00 00       	nop
		_delay_ms(1000);
		PORTB = 0x03;
 308:	98 bb       	out	0x18, r25	; 24
 30a:	4f ef       	ldi	r20, 0xFF	; 255
 30c:	53 ed       	ldi	r21, 0xD3	; 211
 30e:	60 e3       	ldi	r22, 0x30	; 48
 310:	41 50       	subi	r20, 0x01	; 1
 312:	50 40       	sbci	r21, 0x00	; 0
 314:	60 40       	sbci	r22, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x5a>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x64>
 31a:	00 00       	nop
		_delay_ms(1000);
		PORTB = 0x04;
 31c:	88 bb       	out	0x18, r24	; 24
 31e:	4f ef       	ldi	r20, 0xFF	; 255
 320:	53 ed       	ldi	r21, 0xD3	; 211
 322:	60 e3       	ldi	r22, 0x30	; 48
 324:	41 50       	subi	r20, 0x01	; 1
 326:	50 40       	sbci	r21, 0x00	; 0
 328:	60 40       	sbci	r22, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x6e>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x78>
 32e:	00 00       	nop
 330:	cc cf       	rjmp	.-104    	; 0x2ca <main+0x14>

00000332 <__umulhisi3>:
 332:	a2 9f       	mul	r26, r18
 334:	b0 01       	movw	r22, r0
 336:	b3 9f       	mul	r27, r19
 338:	c0 01       	movw	r24, r0
 33a:	a3 9f       	mul	r26, r19
 33c:	70 0d       	add	r23, r0
 33e:	81 1d       	adc	r24, r1
 340:	11 24       	eor	r1, r1
 342:	91 1d       	adc	r25, r1
 344:	b2 9f       	mul	r27, r18
 346:	70 0d       	add	r23, r0
 348:	81 1d       	adc	r24, r1
 34a:	11 24       	eor	r1, r1
 34c:	91 1d       	adc	r25, r1
 34e:	08 95       	ret

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
